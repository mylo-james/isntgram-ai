name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ci-${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

env:
  NODE_ENV: ci
  CI: true

jobs:
  # 1. CODE QUALITY - Lint, test, and coverage checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 🚀 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: 📦 Cache npm dependencies
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: |
            ~/.npm
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: npm-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-deps-

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Lint & Type Check
        run: |
          npm run lint
          npm run type-check

      - name: 🧪 Unit Tests with Coverage
        run: npm test -- --coverage --watchAll=false --coverageReporters=json-summary

      - name: 📦 Archive coverage artifacts
        run: |
          # Create coverage archive with the actual coverage file
          tar -czf coverage-artifacts.tgz coverage/coverage-summary.json

      - name: 📊 Upload Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage-artifacts.tgz
          retention-days: 14

      - name: 📄 Upload JUnit
        uses: actions/upload-artifact@v4
        with:
          name: junit
          path: test-results/junit/jest-junit.xml
          retention-days: 14

  # Coverage enforcement with deterministic paths
  coverage-gate:
    name: Coverage Gate
    runs-on: ubuntu-latest
    needs: [quality]
    steps:
      - name: 🚀 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: 📦 Cache npm dependencies
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: |
            ~/.npm
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: npm-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-deps-

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📥 Download Coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage
          path: .

      - name: 📦 Extract Coverage
        run: |
          # Extract coverage file
          tar -xzf coverage-artifacts.tgz

          # Verify coverage file exists
          echo "Verifying coverage file..."
          ls -la coverage/coverage-summary.json

      - name: 📈 Enforce Coverage Thresholds
        run: npm run coverage:report

  # 2. INTEGRATION - Build and integration tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [quality]
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: isntgram_test
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" --health-interval 10s --health-timeout 5s --health-retries 10
    env:
      DATABASE_URL: postgresql://postgres:postgres@127.0.0.1:5432/isntgram_test
      DB_HOST: 127.0.0.1
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_NAME: isntgram_test
    steps:
      - name: 🚀 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: 📦 Cache npm dependencies
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: |
            ~/.npm
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: npm-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-deps-

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧱 Build Applications
        run: npm run build

      - name: 🔗 Integration Tests
        run: npm run test:integration -- --runInBand --watchAll=false

      - name: 📄 Upload Integration JUnit
        uses: actions/upload-artifact@v4
        with:
          name: junit-integration
          path: test-results/junit/jest-junit.xml
          retention-days: 14

  # 3. E2E TESTS - End-to-end testing
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [integration]
    steps:
      - name: 🚀 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: 📦 Cache npm dependencies
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: |
            ~/.npm
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: npm-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-deps-

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧱 Build Applications
        run: npm run build

      - name: Cache Playwright browsers
        id: cache-playwright
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Install Playwright browsers
        run: npx playwright install chromium --with-deps
        if: steps.cache-playwright.outputs.cache-hit != 'true'

      - name: 🌐 E2E Tests
        run: npm run test:e2e

      - name: 📊 Upload Playwright Report
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 14

  # 4. PRODUCTION BUILD - Container build and security
  production-build:
    name: Production Build
    runs-on: ubuntu-latest
    needs: [integration]
    steps:
      - name: 🚀 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build Production Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.prod
          load: true
          tags: isntgram-ai:prod

      - name: 🔍 Trivy Container Scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: isntgram-ai:prod
          format: "table"
          exit-code: "1"
          severity: "HIGH,CRITICAL"
          ignore-unfixed: true

      - name: 📋 Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          path: .
          format: cyclonedx-xml
          output-file: sbom.xml

      - name: 📤 Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.xml

  # 5. SECURITY - Code security scans (runs in parallel with E2E and Production Build)
  security:
    name: Security Scans
    runs-on: ubuntu-latest
    needs: [quality]
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: 🚀 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: 📦 Cache npm dependencies
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: |
            ~/.npm
            node_modules
            apps/*/node_modules
            packages/*/node_modules
          key: npm-deps-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-deps-

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript

      - name: 🔍 CodeQL Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 🔍 CodeQL Analyze
        uses: github/codeql-action/analyze@v3

      - name: 🔍 Gitleaks Secrets Scan
        run: |
          GL_VERSION=8.24.3
          curl -sSL -o gitleaks.tar.gz https://github.com/zricethezav/gitleaks/releases/download/v${GL_VERSION}/gitleaks_${GL_VERSION}_linux_x64.tar.gz
          tar -xzf gitleaks.tar.gz
          sudo mv gitleaks /usr/local/bin/gitleaks
          gitleaks detect --redact --no-git --config=.gitleaks.toml --report-format=sarif --report-path=gitleaks.sarif

      - name: 📤 Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gitleaks.sarif
